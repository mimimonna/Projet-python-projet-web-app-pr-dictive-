####Importation des biblioth√®ques
 
import streamlit as st
import pandas as pd
import joblib

####Configuration de la page

####Titre principal

st.title ("üé¨ Estimation du revenu d‚Äôun film (en millions $)")

####Chargement du mod√®le

try: #On va anticiper une erreur qui pourrait se produire dans le bloc.
    model = joblib.load("movies_success_predict.pkl")
    #Essaie de charger le mod√®le enregistr√©
    #qui contient notre mod√®le de pr√©diction de succ√®s de films.
    #est une fonction qui permet de lire) le fichier de joblib
    
    expected_cols = joblib.load("new_columns.pkl") 
    #Essaie de charger un autre fichier enregistr√© 
    #qui contient la liste des informations (colonnes) importantes de notre mod√®le.
    #la variable va s'assurer que les donn√©es donner au mod√®le pour faire la pr√©diction sont
    #les bonnes informations et dans le bon ordre.
    
    st.success ("‚úÖ Mod√®le charg√© avec succ√®s.") #fonction de streamlit
    #Si les 2 chargements ont r√©ussi il affiche un message de succ√®s.

except Exception as e: #d√©finit ce qui doit se passer si une erreur se produit une exception,on utilise pr python.
    st.error (f"‚ùå Erreur lors du chargement du mod√®le : {e}") 
    #f-string permet d'ins√©rer 
    #des valeurs de variables dans une cha√Æne de caract√®res
    #Si une erreur se produit pendant le chargement d'un des fichiers 
    #il affiche un msg d'erreur.
    #{e} ins√®re la valeur de la variable dans la cha√Æne de caract√®res.

####Liste fixe des genres 
genres = ['Action', 'Adventure', 'Animation', 'Biography', 'Comedy', 'Crime',
          'Drama', 'Family', 'Fantasy', 'History', 'Horror', 'Music',
          'Musical', 'Mystery', 'Romance', 'Sci-Fi', 'Sport', 'Thriller',
          'War', 'Western']

#on assigne une liste de cha√Ænes de caract√®res √† la variable 'genres'
#qui contient tous les genres de films possibles que notre app va utiliser. 

####Extraction des choix depuis le CSV

df_raw = pd.read_csv("movies_success_predict.csv")
#on cr√©e une variable df_raw. Elle va contenir des informations qui
#pourrait contenir des colonnes telles que le titre du film, les acteurs ect avec d'autres caract√©ristiques. 

directors = sorted(df_raw["Director"].dropna().unique().tolist())
#on va chercher dans le df df_raw la colonne "Director". 
#la colonne contient les noms des r√©alisateurs de chqu film.
#.dropna() : Elle va supprimer tt les valeurs manquantes de la colonne.
#.unique() : Apr√®s qu'on supprime les valeurs manquantes, la fonction va extraire tt les valeurs uniques
#.tolist() : on convertit cette liste unique avec les noms des r√©alisateurs 
#la fonction sorted() prend la liste et trie par ordre alphab√©tique.

actors = sorted(df_raw["Actors"].dropna().unique().tolist())
#On fait la m√™me chose que pour les r√©alisateurs

####utilisateur

genre = st.multiselect("üéûÔ∏è Genres", genres, default=['Action', 'Adventure'])
#une fonction de Streamlit. 
#Elle cr√©e une interface utilisateur interactive o√π l'utilisateur peut s√©lectionner + options parmi la liste.
#c une liste d√©roulante o√π on peux cocher plusieurs cases.
#D√©faut va s√©lectionn√©es par d√©faut lorsque l'app se charge pour la 1e fois

director = st.selectbox("üé¨ R√©alisateur", directors) #une autre fonction de Streamlit. 
#Elle cr√©e une liste d√©roulante √† partir des donn√©es de directors.

actors_choice = st.multiselect("üë• Acteurs principaux", actors, default=actors[:1])
#on prend le premier √©l√©ment de la liste actors et la s√©lectionne par d√©faut

year = st.number_input("üìÖ Ann√©e de sortie", min_value=1900, max_value=2100, value=2024)
#une fonction Streamlit qui cr√©e un champ qui permet √† l'utilisateur d'entrer un nbr
#on lui donne une valeur mini et max pour l'ann√©e de sortie du film.

runtime = st.slider("‚è±Ô∏è Dur√©e (minutes)", min_value=30, max_value=300, value=120)
#C'est une fonction Streamlit qui cr√©e un curseur horizontal 
#pour que l'utilisateur peut d√©placer pour s√©lectionner une valeur.

rating = st.slider("‚≠ê Note IMDb", min_value=0.0, max_value=10.0, step=0.1, value=7.0) 
#On cr√©e une variable rating pour stocker la note IMDb s√©lectionn√©e.

metascore = st.slider("üß† Metascore", min_value=0, max_value=100, value=70)
#On cr√©e une variable metascore pour stocker le Metascore s√©lectionn√© et toujours un curseur Streamlit.

#bref toutes les lignes de code utilisent la librairie Streamlit pour cr√©er des √©l√©ments interactifs sur la page web.

####Pr√©paration des donn√©es

genre_str = ",".join(genre)
#On cr√©e une variable genre_str qui va contenir une cha√Æne de caract√®res.
#join() est une fonction qui s'applique √† une cha√Æne de caract√®res. Elle prend en argument la liste et elle va joindre tt les √©l√©ments de cette liste 
#en une seule cha√Æne de caract√®res en utilisant la virgule comme s√©parateur entre chaque √©l√©ment.

actors_str = ", ".join(actors_choice)
#On cr√©e une variable actors_str qui va contenir une cha√Æne de caract√®res.
#Tous les noms d'acteurs de cette liste seront combin√©s en une seule cha√Æne.

input_data = { 
    "Director": director,
    "Actors": actors_str,
    "Year": year,
    "Runtime (Minutes)": runtime,
    "Rating": rating,
    "Metascore": metascore
}
#on cr√©e une variable nomm√©e input_data. 
#Cette variable va contenir un dictionnaire qui contient toutes les don√©es que l'utilisateur a entr√©es
#Chaque information est stock√©e comme une valeur associ√© c√†d que le dictionnaire est utilis√© pour alimenter 
#le mod√®le de pr√©diction afin de d√©terminer le succ√®s potentiel du film bas√© sur ces entr√©es.

####Conversion en DataFrame

df_input = pd.DataFrame([input_data]) 
#une variable appel√©e df_input. Elle contient un DF de pandas.Chaque cl√© du dictionnaire devient le nom d'une colonne
#les valeurs du dictionnaire remplissent cette unique ligne.
#C une √©tape n√©cessaire car notre mod√®le de machine learning fonctionnent mieux avec des donn√©es du DF.

df_input = pd.get_dummies(df_input)
#On r√©utilise la variable df_input. elle contiendra une version modifi√©e du DF.
#Cela pr√©pare les donn√©es d'entr√©e dans un format adapt√© pour √™tre utilis√© par un mod√®le de ML pour faire une pr√©diction

####Compl√©ter avec colonnes manquantes

for col in expected_cols: 
    if col not in df_input.columns:
        df_input[col] = 0
df_input = df_input[expected_cols]
#Elle va parcourir chaque √©l√©ment de la liste expected_cols. √Ä chaque it√©ration de la boucle, 
#l'√©l√©ment de la liste sera stock√© dans la variable col. √Ä l'int√©rieur de la boucle, 
#cette condition v√©rifie si le nom de colonne actuel (col) existe d√©j√† dans les colonnes de notre DF 
# df_input. df_input.columns donne une liste de tt les noms des colonnes du DF 
#L'op√©rateur not in v√©rifie si col n'est pas pr√©sent dans cette liste.
#Si la condition if est vraie c√†d si la colonne attendue n'existe pas dans df_input, 
#cette ligne ajoute une nouvelle colonne au DF df_input avec le nom de la colonne manquante (col) et 
#remplit tt les cellules de cette nouvelle colonne avec la valeur 0.

####Affichage des donn√©es utilisateur

st.subheader("Donn√©es saisies par l'utilisateur") 
#On cr√©e un sous-titre pour la section des donn√©es saisies par l'utilisateur.
#st.subheader est une fonction de Streamlit 

st.dataframe(df_input)
#On affiche le DF df_input dans l'app Streamlit.

####Pr√©diction

if st.button("Pr√©dire le revenu estim√©"):
    try:
        prediction = model.predict(df_input)[0]
        st.success(f"üí∞ Revenu estim√© : **{prediction:.2f} millions de dollars**")
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la pr√©diction : {e}")
#On cr√©e un bouton "Pr√©dire le revenu estim√©".
#Lorsque l'utilisateur clique sur ce bouton, le mod√®le de pr√©diction est ex√©cut√© et le r√©sultat est affich√©.
#La fonction predict() du mod√®le est utilis√©e pour faire la pr√©diction. Le r√©sultat est affich√© avec un message de succ√®s.
#La valeur de la pr√©diction est format√©e pour afficher 2 d√©cimales.
#Si une erreur se produit pendant la pr√©diction, un message d'erreur est affich√©.